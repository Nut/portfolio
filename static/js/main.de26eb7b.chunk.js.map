{"version":3,"sources":["assets/fonts/OiYou.otf","assets/fonts/OiMate.otf","components/StartHeadline/StartHeadline.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","startText","id","text","Style","styled","div","OiYou","OiMate","Headline","HeadlineBackground","StartHeadline","useState","index","set","useEffect","interval","setInterval","state","length","clearInterval","transitions","useTransition","item","from","position","opacity","transform","left","top","enter","leave","config","stiff","duration","map","props","key","style","App","parallax","React","useRef","visible","setVisible","useIntersectionObserver","entry","isIntersecting","threshold","ref","useSpring","delay","className","pages","scrolling","offset","speed","onClick","current","scrollTo","height","backgroundColor","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,45BCO3C,IAAMC,EAAY,CAChB,CAAEC,GAAI,EAAGC,KAAM,gBACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,aAGXC,EAAQC,IAAOC,IAAV,IAGIC,IAKAC,KAMTC,EAAWJ,IAAOC,IAAV,KAWRI,EAAqBL,IAAOC,IAAV,KAaXK,EAAgB,WAAoB,IAAD,EACzBC,mBAAiB,GADQ,mBACvCC,EADuC,KAChCC,EADgC,KAE9CC,qBAAU,WACR,IAAMC,EAAWC,aACf,kBAAMH,GAAI,SAACI,GAAD,OAAYA,EAAQ,GAAKjB,EAAUkB,YAC7C,KAGF,OAAO,kBAAMC,cAAcJ,MAC1B,IAEH,IAAMK,EAAcC,YAAcrB,EAAUY,IAAQ,SAACU,GAAD,OAAUA,EAAKrB,KAAI,CACrEsB,KAAM,CACJC,SAAU,WACVC,QAAS,EACTC,UAAW,2BACXC,KAAM,MACNC,IAAK,OAEPC,MAAO,CACLJ,QAAS,EACTC,UAAW,4BAEbI,MAAO,CACLL,QAAS,EACTC,UAAW,4BAEbK,OAAO,2BAAMA,IAAOC,OAAd,IAAqBC,SAAU,QAEvC,OACE,kBAAC9B,EAAD,KACGiB,EAAYc,KACX,gBAAGZ,EAAH,EAAGA,KAAMa,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,IAAhB,OACEd,GACE,kBAAC,IAASjB,IAAV,CAAc+B,IAAKA,EAAKC,MAAOF,GAC7B,kBAAC3B,EAAD,KAAWc,EAAKpB,MAChB,kBAACO,EAAD,KAAqBa,EAAKpB,Y,QC/E3BoC,EAAM,WACjB,IAAMC,EAAWC,IAAMC,SADa,EAGN9B,oBAAkB,GAHZ,mBAG7B+B,EAH6B,KAGpBC,EAHoB,OAStBC,aAJsB,SAACC,GACnCF,EAAWE,EAAMC,kBAGiC,CAAEC,UAAW,IAA1DC,EAT6B,oBAW9Bb,EAAQc,YAAU,CACtBxB,QAAS,EACTC,UAAW,WACXE,IAAK,MACLJ,SAAU,WACVG,KAAM,MACNJ,KAAM,CACJE,QAAS,EACTC,UAAW,WACXE,IAAK,MACLJ,SAAU,WACVG,KAAM,OAERuB,MAAO,MAGT,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACf,kBAAC,WAAD,CAAUC,MAAO,EAAGC,WAAW,EAAML,IAAKT,GACxC,kBAAC,gBAAD,CAAee,OAAQ,EAAGC,MAAO,IAC/B,yBAAKJ,UAAU,kBAAkBH,IAAKA,GACnCN,GAAW,kBAAC,EAAD,OAEd,kBAAC,IAASrC,IAAV,CAAcgC,MAAOF,GACnB,yBAAKqB,QAAS,kBAAMjB,EAASkB,QAAQC,SAAS,KAC5C,uBAAGP,UAAU,kBAKnB,kBAAC,gBAAD,CAAeG,OAAQ,EAAGC,MAAO,IAC/B,yBAAKlB,MAAO,CAAEsB,OAAQ,OAAQC,gBAAiB,YAC7C,8CCxCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gXCZN,IAAMC,EAAcC,YAAH,KAajBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACJ,EAAD,MACA,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de26eb7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/OiYou.adbdb35f.otf\";","module.exports = __webpack_public_path__ + \"static/media/OiMate.f5eea207.otf\";","import React, { useState, useEffect } from 'react';\nimport { animated, useTransition, config } from 'react-spring';\nimport styled from 'styled-components';\n\nimport OiYou from '../../assets/fonts/OiYou.otf';\nimport OiMate from '../../assets/fonts/OiMate.otf';\n\nconst startText = [\n  { id: 0, text: 'Development.' },\n  { id: 1, text: 'CS Student.' },\n  { id: 2, text: 'Passion.' }\n];\n\nconst Style = styled.div`\n  @font-face {\n    font-family: oiYou;\n    src: url(${OiYou});\n  }\n\n  @font-face {\n    font-family: oiMate;\n    src: url(${OiMate});\n  }\n\n  font-size: 6vw;\n`;\n\nconst Headline = styled.div`\n  font-family: oiYou;\n  color: #ffd600;\n  position: absolute;\n  display: block;\n  z-index: 1;\n  width: 100%;\n  outline: none;\n  white-space: pre;\n`;\n\nconst HeadlineBackground = styled.div`\n  font-family: oiMate;\n  color: #952626;\n  position: relative;\n  top: 0;\n  left: 0;\n  z-index: 0;\n  width: 100%;\n  display: block;\n  outline: none;\n  white-space: pre;\n`;\n\nexport const StartHeadline = (): JSX.Element => {\n  const [index, set] = useState<number>(0);\n  useEffect(() => {\n    const interval = setInterval(\n      () => set((state) => (state + 1) % startText.length),\n      2000\n    );\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const transitions = useTransition(startText[index], (item) => item.id, {\n    from: {\n      position: 'absolute',\n      opacity: 0,\n      transform: 'translate3d(-50%,-50%,0)',\n      left: '50%',\n      top: '50%'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'translate3d(-50%,-50%,0)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'translate3d(-50%,-60%,0)'\n    },\n    config: { ...config.stiff, duration: 500 }\n  });\n  return (\n    <Style>\n      {transitions.map(\n        ({ item, props, key }) =>\n          item && (\n            <animated.div key={key} style={props}>\n              <Headline>{item.text}</Headline>\n              <HeadlineBackground>{item.text}</HeadlineBackground>\n            </animated.div>\n          )\n      )}\n    </Style>\n  );\n};\n","import React, { MutableRefObject, useState } from 'react';\nimport './App.css';\nimport { animated, useSpring } from 'react-spring';\nimport { Parallax, ParallaxLayer } from 'react-spring/renderprops-addons';\nimport { StartHeadline } from './components/StartHeadline';\nimport { useIntersectionObserver } from '@researchgate/react-intersection-observer';\nimport { ChangeHandler } from '@researchgate/react-intersection-observer/typings/src/types';\n\nexport const App = (): JSX.Element => {\n  const parallax = React.useRef<Parallax>() as MutableRefObject<Parallax>;\n\n  const [visible, setVisible] = useState<boolean>(false);\n\n  const handleChange: ChangeHandler = (entry) => {\n    setVisible(entry.isIntersecting);\n  };\n\n  const [ref] = useIntersectionObserver(handleChange, { threshold: 0 });\n\n  const props = useSpring({\n    opacity: 1,\n    transform: 'scale(1)',\n    top: '90%',\n    position: 'absolute',\n    left: '50%',\n    from: {\n      opacity: 0,\n      transform: 'scale(0)',\n      top: '90%',\n      position: 'absolute',\n      left: '50%'\n    },\n    delay: 500\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"noise\" />\n      <Parallax pages={2} scrolling={true} ref={parallax}>\n        <ParallaxLayer offset={0} speed={0.5}>\n          <div className=\"center-headline\" ref={ref}>\n            {visible && <StartHeadline />}\n          </div>\n          <animated.div style={props}>\n            <div onClick={() => parallax.current.scrollTo(1)}>\n              <i className=\"arrow down\"></i>\n            </div>\n          </animated.div>\n        </ParallaxLayer>\n\n        <ParallaxLayer offset={1} speed={0.5}>\n          <div style={{ height: '100%', backgroundColor: '#003633' }}>\n            <span>Layer 2</span>\n          </div>\n        </ParallaxLayer>\n      </Parallax>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n  font-family: 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: #040404;\n  color: #ffffff;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}