{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["startText","id","text","App","useState","index","set","parallax","React","useRef","useEffect","setInterval","state","length","transitions","useTransition","item","from","position","opacity","transform","left","top","textAlign","enter","leave","config","stiff","className","pages","scrolling","ref","offset","map","props","key","div","style","onClick","current","scrollTo","speed","height","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAKMA,EAAY,CAChB,CAAEC,GAAI,EAAGC,KAAM,gBACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,aAGJC,EAAM,WAAO,IAAD,EACFC,mBAAiB,GADf,mBAChBC,EADgB,KACTC,EADS,KAEjBC,EAAWC,IAAMC,SACvBC,qBACE,WACOC,aACH,kBAAML,GAAI,SAACM,GAAD,OAAYA,EAAQ,GAAKZ,EAAUa,YAC7C,OAEJ,IAEF,IAAMC,EAAcC,YAAcf,EAAUK,IAAQ,SAACW,GAAD,OAAUA,EAAKf,KAAI,CACrEgB,KAAM,CACJC,SAAU,WACVC,QAAS,EACTC,UAAW,2BACXC,KAAM,MACNC,IAAK,MACLC,UAAW,UAEbC,MAAO,CAAEL,QAAS,EAAGC,UAAW,4BAChCK,MAAO,CAAEN,QAAS,EAAGC,UAAW,4BAChCM,OAAQA,IAAOC,QAGjB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACf,kBAAC,WAAD,CAAUC,MAAO,EAAGC,WAAW,EAAMC,IAAKxB,GACxC,kBAAC,gBAAD,CAAeyB,OAAQ,GACrB,yBAAKJ,UAAU,kBACZd,EAAYmB,KAAI,gBAAGjB,EAAH,EAAGA,KAAMkB,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,IAAhB,OACf,kBAAC,IAASC,IAAV,CAAcD,IAAKA,EAAKE,MAAOH,EAAON,UAAU,IAC7CZ,EAAKd,UAIZ,yBACE0B,UAAU,aACVU,QAAS,kBAAM/B,EAASgC,QAAQC,SAAS,KAEzC,uBAAGZ,UAAU,iBAIjB,kBAAC,gBAAD,CAAeI,OAAQ,EAAGS,MAAO,IAC/B,yBAAKJ,MAAO,CAAEK,OAAQ,OAAQC,gBAAiB,YAC7C,8CC9CQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42ec4ab6.chunk.js","sourcesContent":["import React, { MutableRefObject, useEffect, useState } from 'react';\nimport './App.css';\nimport { animated, useTransition, config } from 'react-spring';\nimport { Parallax, ParallaxLayer } from 'react-spring/renderprops-addons';\n\nconst startText = [\n  { id: 0, text: 'Development.' },\n  { id: 1, text: 'CS Student.' },\n  { id: 3, text: 'Passion.' }\n];\n\nexport const App = () => {\n  const [index, set] = useState<number>(0);\n  const parallax = React.useRef<Parallax>() as MutableRefObject<Parallax>;\n  useEffect(\n    () =>\n      void setInterval(\n        () => set((state) => (state + 1) % startText.length),\n        5000\n      ),\n    []\n  );\n  const transitions = useTransition(startText[index], (item) => item.id, {\n    from: {\n      position: 'absolute',\n      opacity: 0,\n      transform: 'translate3d(-50%,-40%,0)',\n      left: '50%',\n      top: '50%',\n      textAlign: 'center'\n    },\n    enter: { opacity: 1, transform: 'translate3d(-50%,-50%,0)' },\n    leave: { opacity: 0, transform: 'translate3d(-50%,-60%,0)' },\n    config: config.stiff\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"noise\" />\n      <Parallax pages={2} scrolling={true} ref={parallax}>\n        <ParallaxLayer offset={0}>\n          <div className=\"start-headline\">\n            {transitions.map(({ item, props, key }) => (\n              <animated.div key={key} style={props} className=\"\">\n                {item.text}\n              </animated.div>\n            ))}\n          </div>\n          <div\n            className=\"arrow-wrap\"\n            onClick={() => parallax.current.scrollTo(1)}\n          >\n            <i className=\"arrow down\"></i>\n          </div>\n        </ParallaxLayer>\n\n        <ParallaxLayer offset={1} speed={0.4}>\n          <div style={{ height: '100%', backgroundColor: '#003633' }}>\n            <span>Layer 2</span>\n          </div>\n        </ParallaxLayer>\n      </Parallax>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}